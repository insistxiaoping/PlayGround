<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans.xsd 
			http://www.springframework.org/schema/mvc 
			http://www.springframework.org/schema/mvc/spring-mvc.xsd 
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context.xsd 
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop.xsd 
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx.xsd ">
            
             <!-- ===========================数据源配置=============================== -->
	    <!-- 1. 加载数据库配置的属性文件 -->
	     <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>classpath:jdbc.properties</value>
        </property>
    </bean>
		
		<!-- 2. 数据源配置 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">  
    <property name="url" value="${jdbc.url}" />  
    <property name="username" value="${jdbc.username}" />  
    <property name="password" value="${jdbc.password}" />
    <property name="driverClassName" value="${jdbc.driverClassName}" />  
    <property name="filters" value="mergeStat" />    
    <property name="maxActive" value="20" />   
    <property name="initialSize" value="1" />  
    <property name="maxWait" value="60000" />  
    <property name="minIdle" value="1" />  
    <property name="timeBetweenEvictionRunsMillis" value="3000" />  
    <property name="minEvictableIdleTimeMillis" value="300000" />  
    <property name="validationQuery" value="SELECT 'x'" />  
    <property name="testWhileIdle" value="true" />  
    <property name="testOnBorrow" value="false" />  
    <property name="testOnReturn" value="false" />  
    <property name="poolPreparedStatements" value="true" />  
    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />  
    </bean>
            
            <!-- 3. 包扫描dao,service -->
	<context:component-scan base-package="com.td.pm.service"/>
	<context:component-scan base-package="com.td.pm.dao" use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Repository" />
	</context:component-scan>
	
	 <!-- 配置MyBatis session工厂 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="configLocation" value="classpath:sqlMapConfig.xml" />
        <property name="mapperLocations" value="classpath:com/td/pm/mapper/*.xml"/>
        <!-- MybatisSpringPageInterceptor分页拦截器 -->
<!-- 		<property name="plugins"> -->
<!-- 			<bean class="com.td.pm.utils.MybatisSpringPageInterceptor"></bean> -->
<!-- 		</property> -->
    </bean>
    
    	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.td.pm.mapper" />
	</bean>
    
     <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
<!--     <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> -->
<!--         <property name="basePackage" value="com.td.pm.dao" /> -->
<!--         <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property> -->
<!--     </bean> -->
    
    <!-- (事务管理)transaction manager -->
<!--     <bean id="transactionManager" -->
<!--         class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> -->
<!--         <property name="dataSource" ref="dataSource" /> -->
<!--     </bean> -->

	<!-- 5. 事务 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="view*" read-only="true" />
		</tx:attributes>
	</tx:advice>

<!-- 	<aop:config> -->
<!-- 		<aop:pointcut expression="execution(* com.td.pm.service.*.*(..))" -->
<!-- 			id="txPointcut" /> -->
<!-- 		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" /> -->
<!-- 	</aop:config> -->
 
    <!-- 注解方式配置事物 -->
    <tx:annotation-driven transaction-manager="transactionManager" />



            
</beans>